services:
  postgres:
    image: postgres:16-alpine
    container_name: pg
    env_file: .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    command: >
      redis-server
        --save ""
        --appendonly no
        --maxmemory 128mb
        --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.api
    container_name: api
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - '4000:4000'
    mem_limit: 1g
    cpus: '1.0'
    ulimits:
      nofile: 65535
    healthcheck:
      test: ['CMD', 'curl', '-fs', 'http://localhost:4000/health']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: worker
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 512M
    cpus: '0.5'
    shm_size: 1gb
    restart: unless-stopped

  landing:
    build: ./landing
    container_name: landing
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    ports:
      - '3000:3000'
    restart: unless-stopped

volumes:
  pgdata:
